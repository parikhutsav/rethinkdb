#!/usr/bin/env python

import sys
import os
from os.path import abspath, join, dirname, pardir
import time

# sys.path.insert(0, abspath(join(dirname(__file__), pardir, "build", "packages", "python")))
sys.path.insert(0, abspath(join(dirname(__file__), pardir, "lib")))

from retest.framework import run, Test, TestTree, SimpleTest
from retest.unit import AllUnitTests
from retest.shelltest import ShellCommandTest

# Dummy tests to test the test runner
def pass_():
    pass

def fail():
    raise Exception("failed")

def wait(n):
    return lambda: time.sleep(n)

# Initialise the list of tests with the dumy tests and the unit tests
tests = TestTree({
    'dummy': TestTree({
        'pass': SimpleTest(pass_),
        'fail': SimpleTest(fail),
        'timeout': SimpleTest(wait(2), timeout=1),
        'notimeout': SimpleTest(wait(2)),
        'print': SimpleTest(lambda: sys.stdout.write('hello\n'))
    }),
    'unit': AllUnitTests()
})

# helper function for loading tests from full_test/*.test
def generate_test(tree):
    def gen(test_command, name):
        i = 1
        new_name = name
        while tree.has_test(new_name):
            i = i + 1
            new_name = name + '-' + str(i)
        tree[new_name] = ShellCommandTest(test_command)
    return gen

# load the tests from full_test/*.test
def load_tests():
    for (dirpath, __, filenames) in os.walk(join(dirname(__file__), "full_test")):
        filenames = [f for f in filenames if f.split('.')[-1] == 'test']
        for filename in filenames:
            base_name = filename.split('.')[0]
            tree = TestTree();
            full_path = os.path.join(dirpath, filename)
            execfile(full_path, {"__builtins__": __builtins__, "generate_test": generate_test(tree)})
            tests[base_name] = tree
            
if __name__ == '__main__':
    load_tests()
    run(tests, sys.argv[1:])
