workloads = {
    'append-stress': "$RETHINKDB/test/memcached_workloads/append_stress.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'many-keys': "$RETHINKDB/test/memcached_workloads/many_keys.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'multi-serial': "$RETHINKDB/test/memcached_workloads/multi_serial_mix.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'pipeline': "$RETHINKDB/test/memcached_workloads/pipeline.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'rget': "$RETHINKDB/test/memcached_workloads/rget.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'rget-huge': "$RETHINKDB/test/memcached_workloads/rget_huge.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'serial-mix': "$RETHINKDB/test/memcached_workloads/serial_mix.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'unappend-unprepend': "$RETHINKDB/test/memcached_workloads/unappend_unprepend.py --address $HOST:$PORT --table $DB_NAME.$TABLE_NAME",
    'python': "$RETHINKDB/test/rdb_workloads/test.py",
    'javascript': "node $RETHINKDB/test/rdb_workloads/test.js $HOST $PORT"
    }

for wname, workload in workloads.items():
    generate_test(
        "$RETHINKDB/test/scenarios/static_cluster.py '%s'" % (workload,),
        name = wname
        )

generate_test(
    "$RETHINKDB/test/scenarios/proxy_cluster.py '$RETHINKDB/test/memcached_workloads/serial_mix.py $HOST:$PORT'",
    name = 'proxy-cluster'
    )
